app.post("/api/generate-review", async (req, res) => {
  try {
    const { keywords } = req.body;

    // Validate input
    if (!keywords || !Array.isArray(keywords)) {
      return res.status(400).json({ error: "Keywords must be a non-empty array" });
    }

    // Generate review using OpenAI
    const openAiResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // Use "text-davinci-003" if you prefer completion
      messages: [
        { role: "system", content: "You are a helpful assistant." },
        { role: "user", content: `Generate a review based on these keywords: ${keywords.join(", ")}` },
      ],
      max_tokens: 100,
    });

    console.log("OpenAI API response:", openAiResponse); // Log the entire response

    const reviewText = openAiResponse?.data?.choices?.[0]?.message?.content?.trim();

    if (!reviewText) {
        console.error("Unexpected response structure:", openAiResponse); // Log the unexpected structure
        return res.status(500).json({ error: "Failed to generate review text" });
    }

    // Save review to MongoDB
    const newReview = new Review({
      text: reviewText,
      stars: Math.floor(Math.random() * 5) + 1, // Random stars
      keywords,
    });

    const savedReview = await newReview.save();

    res.status(201).json({ message: "Review generated successfully", review: savedReview });
  } catch (error) {
    console.error("Error generating or saving review:", error);
    res.status(500).json({ error: "An error occurred while generating the review" });
  }
});

app.post('/api/save-review', async (req, res) => {
  const { text, stars, keywords } = req.body;

  try {
    const newReview = new Review({ text, stars, keywords });
    await newReview.save();
    res.status(201).json({ message: 'Review saved successfully' });
  } catch (err) {
    console.error('Error saving review:', err);
    res.status(500).json({ error: 'Failed to save review' });
  }
});

app.get('/api/get-stats', async (req, res) => {
  try {
    const totalReviews = await Review.countDocuments();
    const starDistribution = await Review.aggregate([
      { $group: { _id: '$stars', count: { $sum: 1 } } },
    ]);
    res.json({ totalReviews, starDistribution });
  } catch (err) {
    console.error('Error fetching stats:', err);
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

// Add this to handle fetching all reviews
app.get('/api/get-reviews', async (req, res) => {
  try {
    const reviews = await Review.find();
    res.json(reviews);
  } catch (error) {
    console.error('Error fetching reviews:', error);
    res.status(500).json({ error: 'An error occurred while fetching reviews' });
  }
});

// Start the server
app.listen(5000, () => {
  console.log('Server is running on http://localhost:5000');
});